@page
<div class="container">
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-2">User</div>
        <div class="col-4"><input type="text" id="userInput" /></div>
    </div>
    <div class="row">
        <div class="col-2">Message</div>
        <div class="col-4"><input type="text" id="messageInput" /></div>
    </div>
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-6">
            <input type="button" id="sendButton" value="Send Message" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <hr />
    </div>
</div>
<div class="row">
    <div class="col-6">
        <ul id="messagesList"></ul>
    </div>
</div>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>

<asp:HiddenField ID="color" Value="0" runat="server" /> <!--Hidden field for color (use is for passing to server)-->
<asp:HiddenField ID="xcoord" Value="0" runat="server" />
<asp:HiddenField ID="ycoord" Value="0" runat="server" />

<div class="badge">
    <input type="button" id="gamePlay" value="Next" onclick="gameMath()" />
</div>

<div class="text-center">
    <canvas id="grid"></canvas>

    <script>
        //creating a function that will draw a grid
        var drawGrid = function (ctx, w, h) {
            //get width
            ctx.canvas.width = w;
            //get height
            ctx.canvas.height = h;
            //making the grid lines
            for (x = 0; x <= w; x += 20) {
                for (y = 0; y <= h; y += 20) {
                    ctx.moveTo(x, 0);
                    ctx.lineTo(x, h);
                    ctx.stroke();
                    ctx.moveTo(0, y);
                    ctx.lineTo(w, y);
                    ctx.stroke();
                }
            }
        };

        //create canvas
        var canvas = document.getElementById("grid");
        //making the canvas something we can write on
        var ctx = canvas.getContext('2d');

        //just coming up with some random color in rgb
        function random_rgba() {
            var o = Math.round, r = Math.random, s = 255;
            return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ', 0.5)';
        }
        var color = random_rgba();
        console.log("Color: " + color);
        document.getElementById("color").value = color; //Assigns color to hidden field

        //now draw the grid
        drawGrid(ctx, 300, 300);

        //function figuring out where the canvas is clicked
        function getCursorPosition(canvas, event) {
            const rect = canvas.getBoundingClientRect()
            const relativeX = event.clientX - rect.left;
            const relativeY = event.clientY - rect.top;
            //console.log("Relative Info - X: " + relativeX + " Y: " + relativeY);
            getSquareInfo(relativeX, relativeY);
        }

        //getting the position of the mouse
        canvas = document.querySelector('canvas');
        canvas.addEventListener('mousedown', function (e) {
            getCursorPosition(canvas, e);
        })

        //getting all the information needed about this square
        function getSquareInfo(relativeX, relativeY) {

            //getting basic info of the square clicked
            var x = Math.trunc(relativeX / 20);
            var y = Math.trunc(relativeY / 20);
            var sqrX = x * 20;
            var sqrY = y * 20;

            //Assigns hidden values for passing to server
            document.getElementById("xcoord").value = x;
            document.getElementById("ycoord").value = y;

            console.log("Info To Pass - X:" + x + " Y:" + y);
            addToArray(x, y, sqrX, sqrY);
        }

        //making an array for the canvas
        var gridArray = new Array(288);
        //setting all the edges seperately cause gd this is long
        gridArray[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] = 0;
        gridArray[17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255] = 0;
        gridArray[272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288] = 0;
        gridArray[33, 50, 67, 84, 101, 118, 135, 152, 169, 186, 203, 220, 237, 254, 271] = 0;

        //now add the item to the array
        function addToArray(x, y, sqrX, sqrY) {

            //determine where the actual place in the array this will be stored
            var arraySpot;
            arraySpot = ((x + 1) * 17) + (y + 1);

            //testing help
            //console.log("Array Spot: " + arraySpot);
            //console.log("Currently in spot: " + gridArray[arraySpot]);

            //now place info inside array (undefined = empty, 1 = live, 0 = end space)
            if (gridArray[arraySpot] == undefined) {
                gridArray[arraySpot] = 1;
                ctx.fillStyle = (color);
                ctx.fillRect(sqrX, sqrY, 20, 20);
                console.log("Spot not taken, placing in array space: " + arraySpot);
            } else if (gridArray[arraySpot] == 1) {
                console.log("Spot : " + arraySpot + " in array is taken, please try again");
            }

        }

        //TO DO: to add in the math for the game once we can figure out how to pass multiple values in
        //TO DO: add onclick="gameMath()" to button
        function gameMath() {

            //loop through the array first
            for (var i = 18; i <= 288; i++) {
                //easier way to track x and y location of cells being searched
                var x = Math.trunc(i / 17) - 1;
                var y = (i % 17) - 1;
                var sqrX = x * 20;
                var sqrY = y * 20;
                var count = 0;
                //console.log("x coord:" + x + " y coord: " + y);

                //will need to check -18 , -17, -16, -1, +1, +16, 17, +18 and if the total = 3 the cell = 1
                if (gridArray[i - 18] == 1) {
                    count++;
                }
                if (gridArray[i - 17] == 1) {
                    count++;
                }
                if (gridArray[i - 16] == 1) {
                    count++;
                }
                if (gridArray[i - 1] == 1) {
                    count++;
                }
                if (gridArray[i + 1] == 1) {
                    count++;
                }
                if (gridArray[i + 16] == 1) {
                    count++;
                }
                if (gridArray[i + 17] == 1) {
                    count++;
                }
                if (gridArray[i + 18] == 1) {
                    count++;
                }
                //console.log('Space: ' + i + ' has ' + count + ' neighbors');

                if (gridArray[i] == 1) { 
                    debugger;
                    //console.log(i + " spot is equal to 1");
                    if (count >= 4 || count == 0 || count == 1) { //Any live cell with 1 or 0 or greater than 4 neighbors dies
                        debugger;
                        gridArray[i] = undefined;
                        deadColor = 'rgba(255, 255, 255, 0.5)';
                        ctx.fillStyle = (deadColor);
                        ctx.fillRect(sqrX, sqrY, 19, 19);
                    }
                    //Any live cell with 2 or 3 neighbors survives so we don't need to do anything

                } else if (gridArray[i] == undefined) {//see if any dead with 3 neighbors will come to life
                    //TO DO: Figure out the random color information
                    if (count == 3) {
                        gridArray[i] = 1;
                        AliveColor = 'rgba(0,0,0,0.5';
                        ctx.fillStyle = (AliveColor);
                        ctx.fillRect(sqrX, sqrY, 20, 20);
                    }

                }
            }

        }

    </script>
</div>
