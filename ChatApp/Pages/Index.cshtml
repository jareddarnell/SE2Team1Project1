@page
<script src="~/js/signalr/dist/browser/signalr.js"></script>

<div class="badge">
    <input type="button" id="gamePlay" value="Next"/>
</div>

<div class="text-center">
    <canvas id="grid"></canvas>

    <script>// GLOBAL FEATURES /////////////////////////////////////////////////////////////////////////////

        var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build(); //local setting
        //var connection = new signalR.HubConnectionBuilder().withUrl("http://students.cs.weber.edu/Group123/chatHub").build(); // Server setting

        // ORIGINAL GAME GRID
        var drawGrid = function (ctx, w, h) {
            //get width
            ctx.canvas.width = w;
            //get height
            ctx.canvas.height = h;
            //making the grid lines
            for (x = 0; x <= w; x += 20) {
                for (y = 0; y <= h; y += 20) {
                    ctx.moveTo(x, 0);
                    ctx.lineTo(x, h);
                    ctx.stroke();
                    ctx.moveTo(0, y);
                    ctx.lineTo(w, y);
                    ctx.stroke();
                }
            }
        };// end of drawGrid

        // CANVAS
        var canvas = document.getElementById("grid");
        //making the canvas something we can write on
        var ctx = canvas.getContext('2d');

        // PLAYERS COLOR
        function random_rgba() {
            var o = Math.round, r = Math.random, s = 255;
            return 'rgb(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ')';
        }
        var color = random_rgba();

        //RGB Parser function
        function rgb_parser(rgb, selection)
        {
            rgb = rgb.toString();

            rgb = rgb.substring(4, rgb.length - 1).replace(/ /g, '').split(',');

            if (selection == 'r')
            {
                return rgb[0];
            }

            if (selection == 'g')
            {
                return rgb[1];
            }

            if (selection == 'b')
            {
                rgb[2] = rgb[2].replace(")", "");

                return rgb[2];
            }
        }

        //Function to average RGB colors
        function rgb_average(...colors)
        {
            var length = arguments.length + 1;

            var sumred = 0;
            var sumgreen = 0;
            var sumblue = 0;

            function rgb_averager(color)
            {
                sumred += rgb_parser(color, 'r');
                sumgreen += rgb_parser(color, 'g');
                sumblue += rgb_parser(color, 'b');
            }

            colors.forEach(rgb_averager);

            var avgred = sumred / length;
            var avggreen = sumgreen / length;
            var avgblue = sumblue / length;

            console.log('rgb: ' + sumred + ' ' + sumgreen + ' ' + sumblue);

            return 'rgb(' + avgred + ',' + avggreen + ',' + avgblue + ')';
        }

        // GAME GRID
        drawGrid(ctx, 320, 320);

        // GAME GRID ARRAY
        var gridArray = new Array(323);
        // setting all the edges seperately cause gd this is long
        gridArray[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17] = { color: '', value: 0, coords: null };
        gridArray[18, 36, 54, 72, 90, 108, 126, 144, 162, 180, 198, 216, 234, 252, 270, 288] = { color: '', value: 0, coords: null };
        gridArray[35, 53, 71, 89, 107, 125, 143, 161, 179, 197, 215, 233, 251, 269, 287, 305] = { color: '', value: 0, coords: null };
        gridArray[306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323] = { color: '', value: 0, coords: null };

        //////////////////////////////////////////////////////////////////////////////////////////////////////



        // function figuring out where the canvas is clicked
        function getCursorPosition(canvas, event) {
            const rect = canvas.getBoundingClientRect()
            const relativeX = event.clientX - rect.left;
            const relativeY = event.clientY - rect.top;

            getSquareInfo(relativeX, relativeY);
        }// end of getCoursorPosition()


        // getting the position of the mouse
        canvas = document.querySelector('canvas');
        canvas.addEventListener('mousedown', function (e) {
            getCursorPosition(canvas, e);
        })

        // getting all the information needed about this square
        function getSquareInfo(relativeX, relativeY) {

            //getting basic info of the square clicked
            var x = Math.trunc(relativeX / 20);
            var y = Math.trunc(relativeY / 20);
            var sqrX = (x * 20) + 1;
            var sqrY = (y * 20) + 1;
            console.log("Square Info - X:" + x + " Y:" + y);
            addToArray(x, y, sqrX, sqrY);
        }

        // now add the item to the array
        function addToArray(x, y, sqrX, sqrY, c = color) {
            // determine where the actual place in the array this will be stored
            var arraySpot;
            arraySpot = ((x + 1) * 18) + (y + 1);

            

            // now place info inside array (undefined = empty, 1 = live, 0 = end space)
            if (!gridArray[arraySpot]) {
                gridArray[arraySpot] = {};
                gridArray[arraySpot].value = 1;
                gridArray[arraySpot].color = c;
                gridArray[arraySpot].coords = { x, y, sqrX, sqrY };
                ctx.clearRect(sqrX, sqrY, 18, 18);
                ctx.fillStyle = (c);
                ctx.fillRect(sqrX, sqrY, 18, 18);

            } else if (gridArray[arraySpot].value == 1) {
                gridArray[arraySpot] = undefined;
                ctx.clearRect(sqrX, sqrY, 18, 18);
            }
        }// end addToArray()

        function renderCell(sqrX, sqrY, c = color) {
            ctx.clearRect(sqrX, sqrY, 18, 18);
            ctx.fillStyle = (c);
            ctx.fillRect(sqrX, sqrY, 18, 18);
        }// end renderCell()


        function reRender() {
            for (var i = 0; i < gridArray.length; i++) {
                
                // render alive cell
                if (gridArray[i] && gridArray[i].coords) {
                    renderCell(gridArray[i].coords.sqrX, gridArray[i].coords.sqrY, gridArray[i].color);
                }
            }
        }// end reRender()


        // this function will run the entire game
        function gameMath() {

            // loop through the array first
            for (var i = 19; i <= 304; i++) {

                // easier way to track x and y location of cells being searched
                var x = Math.trunc(i / 18) - 1;
                var y = (i % 18) - 1;
                var sqrX = (x * 20) + 1;
                var sqrY = (y * 20) + 1;
                var count = 0;

                // will need to check -18 , -17, -16, -1, +1, +16, 17, +18 and if the total = 3 the cell = 1
                if (gridArray[i - 19] && (gridArray[i - 19].value == 1 || gridArray[i - 19].value == 3)) {
                    count++;
                }
                if (gridArray[i - 18] && (gridArray[i - 18].value == 1 || gridArray[i - 18].value == 3)) {
                    count++;
                }
                if (gridArray[i - 17] && (gridArray[i - 17].value == 1 || gridArray[i - 17].value == 3)) {
                    count++;
                }
                if (gridArray[i - 1] && (gridArray[i - 1].value == 1 || gridArray[i - 1].value == 3)) {
                    count++;
                }
                if (gridArray[i + 1] && (gridArray[i + 1].value == 1 || gridArray[i + 1].value == 3)) {
                    count++;
                }
                if (gridArray[i + 17] && (gridArray[i + 17].value == 1 || gridArray[i + 17].value == 3)) {
                    count++;
                }
                if (gridArray[i + 18] && (gridArray[i + 18].value == 1 || gridArray[i + 18].value == 3)) {
                    count++;
                }
                if (gridArray[i + 19] && (gridArray[i + 19].value == 1 || gridArray[i + 19].value == 3)) {
                    count++;
                }

                // Any live cell with 1 or 0 or greater than 4 neighbors dies (2 or 3 3 neighbors live)
                if (gridArray[i]) {
                    console.log("Checking value, should be 1: " + gridArray[i].value);                    
                    if (count >= 4 || count == 0 || count == 1) {
                        console.log('Space: ' + i + ' has ' + count + ' neighbors');
                        gridArray[i] = {};
                        gridArray[i].value = 3; //3 is just a temporary value for going to die
                        deadColor = 'rgb(255, 255, 255)';
                        gridArray[i].color = deadColor;
                        gridArray[i].coords = { x, y, sqrX, sqrY };
                        ctx.fillStyle = (deadColor);
                        ctx.fillRect(sqrX, sqrY, 18, 18);
                    }
                }
                // see if any dead with 3 neighbors will come to life
                else if (!gridArray[i]) {
                    // TO DO: Figure out the random color information
                    // AVERAGE COLOR GOES IN HERE SOMEWHERE
                    if (count == 3) {
                        gridArray[i] = {};
                        gridArray[i].value = 4; // 4 will just be a temporary value for going to come to life

                        var colorList = [];
                        var AliveColor = 'rgb(0,0,0)'; //fallback color

                        //do out-of-bounds checks
                        var toprow = 0;
                        var bottomrow = 0;
                        var leftcolumn = 0;
                        var rightcolumn = 0;

                        if ((i % 18) == 0) {
                            toprow = 1;
                        }
                        else {
                            toprow = 0;
                        }

                        if (((i + 1) % 18) == 0) {
                            bottomrow = 1;
                        }
                        else {
                            bottomrow = 0;
                        }

                        if (i < 18) {
                            leftcolumn = 1;
                        }
                        else {
                            leftcolumn = 0;
                        }

                        if ((i > 305) && (i < 324)) {
                            rightcolumn = 1;
                        }
                        else {
                            rightcolumn = 0;
                        }

                        //load colors into colorList
                        //check cardinal
                        if ( (toprow == 0) && (gridArray[i - 1] != null) )
                        {
                            colorList.push(gridArray[i - 1].color);
                            console.log("Top middle color");
                        }

                        if ( (bottomrow == 0) && (gridArray[i + 1] != null))
                        {
                            colorList.push(gridArray[i + 1].color);
                            console.log("Bottom middle color");
                        }

                        if ( (leftcolumn == 0) && (gridArray[i - 18] != null) )
                        {
                            colorList.push(gridArray[i - 18].color);
                            console.log("Left middle color");
                        }

                        if ( (rightcolumn == 0) && (gridArray[i + 18] != null) )
                        {
                            colorList.push(gridArray[i + 18].color);
                            console.log("Right middle color");
                        }

                        //check diagonal
                        //check top-left
                        if ( (leftcolumn == 0) && (toprow == 0) && (gridArray[i - 19] != null) )
                        {
                            colorList.push(gridArray[i - 19].color);
                            console.log("Top left color");
                        }

                        //check top-right
                        if ( (rightcolumn == 0) && (toprow == 0) && (gridArray[i + 17] != null) )
                        {
                            colorList.push(gridArray[i + 17].color);
                            console.log("Top right color");
                        }

                        //check bottom-left
                        if ( (leftcolumn == 0) && (bottomrow == 0) && (gridArray[i - 17] != null) )
                        {
                            colorList.push(gridArray[i - 17].color);
                            console.log("Top left color");
                        }

                        //check bottom-right
                        if ( (rightcolumn == 0) && (bottomrow == 0) && (gridArray[i + 19] != null) )
                        {
                            colorList.push(gridArray[i + 19].color);
                            console.log("Top right color");
                        }

                        //Average all the colors and assign to AliveColor
                        AliveColor = rgb_average(colorList);

                        gridArray[i].color = AliveColor;
                        gridArray[i].coords = { x, y, sqrX, sqrY };
                        ctx.fillStyle = (AliveColor);
                        ctx.fillRect(sqrX, sqrY, 18, 18);
                    }
                }
            }

            // now change everything to their normal numbers 3-> undefined and 4->1
            for (var i = 19; i <= 304; i++) {
                if (gridArray[i] && gridArray[i].value == 3) {
                    gridArray[i] = null;
                } else if (gridArray[i] && gridArray[i].value == 4) {
                    gridArray[i].value = 1;
                }
            }

            connection.invoke("SendMessage", color, gridArray).catch(function (err) {
                return console.error(err);
            });
        }// end gameMath()
    </script>
</div>
<script src="~/js/chat.js"></script>    
