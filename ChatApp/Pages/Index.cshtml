@page
<div class="container">
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-2">User</div>
        <div class="col-4"><input type="text" id="userInput" /></div>
    </div>
    <div class="row">
        <div class="col-2">Message</div>
        <div class="col-4"><input type="text" id="messageInput" /></div>
    </div>
    <div class="row">&nbsp;</div>
    <div class="row">
        <div class="col-6">
            <input type="button" id="sendButton" value="Send Message" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <hr />
    </div>
</div>
<div class="row">
    <div class="col-6">
        <ul id="messagesList"></ul>
    </div>
</div>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>

<asp:HiddenField ID="color" Value="0" runat="server" /> <!--Hidden field for color (use is for passing to server)-->
<asp:HiddenField ID="xcoord" Value="0" runat="server" />
<asp:HiddenField ID="ycoord" Value="0" runat="server" />

<div class="text-center">
    <canvas id="grid"></canvas>

    <script>
        //creating a function that will draw a grid
        var drawGrid = function (ctx, w, h) {
            //get width
            ctx.canvas.width = w;
            //get height
            ctx.canvas.height = h;
            //making the grid lines
            for (x = 0; x <= w; x += 20) {
                for (y = 0; y <= h; y += 20) {
                    ctx.moveTo(x, 0);
                    ctx.lineTo(x, h);
                    ctx.stroke();
                    ctx.moveTo(0, y);
                    ctx.lineTo(w, y);
                    ctx.stroke();
                }
            }
        };

        //create canvas
        var canvas = document.getElementById("grid");
        //making the canvas something we can write on
        var ctx = canvas.getContext('2d');

        //just coming up with some random color in rgb
        function random_rgba() {
            var o = Math.round, r = Math.random, s = 255;
            return 'rgb(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ', 0.5)';
        }
        var color = random_rgba();
        console.log("Color: " + color);
        document.getElementById("color").value = color; //Assigns color to hidden field

        //now draw the grid
        drawGrid(ctx, 300, 300);

        //function figuring out where the canvas is clicked
        function getCursorPosition(canvas, event) {
            const rect = canvas.getBoundingClientRect()
            const relativeX = event.clientX - rect.left;
            const relativeY = event.clientY - rect.top;
            console.log("Relative Info - X: " + relativeX + " Y: " + relativeY);
            getSquareInfo(relativeX, relativeY);
        }

        //getting the position of the mouse
        canvas = document.querySelector('canvas');
        canvas.addEventListener('mousedown', function (e) {
            getCursorPosition(canvas, e);
        })

        //getting all the information needed about this square
        function getSquareInfo(relativeX, relativeY) {

            //getting basic info of the square clicked
            var x = Math.trunc(relativeX / 20);
            var y = Math.trunc(relativeY / 20);
            var sqrX = x * 20;
            var sqrY = y * 20;

            //Assigns hidden values for passing to server
            document.getElementById("xcoord").value = x;
            document.getElementById("ycoord").value = y;

            console.log("Info To Pass - X:" + x + " Y:" + y);
            addToArray(x, y, sqrX, sqrY);
        }

        //making an array for the canvas
        var gridArray = new Array(254);
        //setting all the top edges
        gridArray[0, 17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238] = 0;
        gridArray[16, 33, 50, 67, 84, 101, 118, 135, 152, 169, 186, 203, 220, 237, 254] = 0;

        //now add the item to the array
        function addToArray(x, y, sqrX, sqrY) {

            //determine where the actual place in the array this will be stored
            var arraySpot;
            arraySpot = (x * 17) + (y + 1);

            //testing help
            //console.log("Array Spot: " + arraySpot);
            //console.log("Currently in spot: " + gridArray[arraySpot]);

            //now place info inside array (undefined = empty, 1 = live, 0 = end space)
            if (gridArray[arraySpot] == undefined) {
                gridArray[arraySpot] = 1;
                ctx.fillStyle = (color);
                ctx.fillRect(sqrX, sqrY, 20, 20);                
                console.log("Spot not taken, placing in array space: " + arraySpot);
            } else if (gridArray[arraySpot] == 1) {
                console.log("Spot : " + arraySpot + " in array is taken, please try again");
            }

        }

        //TO DO: to add in the math for the game once we can figure out how to pass multiple values in
        //TO DO: add onclick="gameMath()" to button
        function gameMath() {
            //Any live cell with 2 or 3 neighbors survives
            //Any dead cell with 3 live neighbors comes to life
            //Any live cell with 1 or 0 neighbors dies
            //Any live cell with 4 or more neighbors dies

        }

    </script>
</div>
