@page
<script src="~/js/signalr/dist/browser/signalr.js"></script>

<div class="badge">
    <input type="button" id="gamePlay" value="Next" onclick="gameMath()" />
</div>

<div class="text-center">
    <canvas id="grid"></canvas>

    <script>// GLOBAL FEATURES /////////////////////////////////////////////////////////////////////////////

        var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build(); //local setting

        // ORIGINAL GAME GRID
        var drawGrid = function (ctx, w, h) {
            //get width
            ctx.canvas.width = w;
            //get height
            ctx.canvas.height = h;
            //making the grid lines
            for (x = 0; x <= w; x += 20) {
                for (y = 0; y <= h; y += 20) {
                    ctx.moveTo(x, 0);
                    ctx.lineTo(x, h);
                    ctx.stroke();
                    ctx.moveTo(0, y);
                    ctx.lineTo(w, y);
                    ctx.stroke();
                }
            }
        };// end of drawGrid

        // CANVAS
        var canvas = document.getElementById("grid");
        //making the canvas something we can write on
        var ctx = canvas.getContext('2d');

        // PLAYERS COLOR
        function random_rgba() {
            var o = Math.round, r = Math.random, s = 255;
            return 'rgba(' + o(r() * s) + ',' + o(r() * s) + ',' + o(r() * s) + ', 0.5)';
        }
        var color = random_rgba();

        // GAME GRID
        drawGrid(ctx, 300, 300);

        // GAME GRID ARRAY
        var gridArray = new Array(288);
        //setting all the edges seperately cause gd this is long
        gridArray[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] = { color: '', value: 0, coords: null };
        gridArray[17, 34, 51, 68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255] = { color: '', value: 0, coords: null };
        gridArray[272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288] = { color: '', value: 0, coords: null };
        gridArray[33, 50, 67, 84, 101, 118, 135, 152, 169, 186, 203, 220, 237, 254, 271] = { color: '', value: 0, coords: null };

        //////////////////////////////////////////////////////////////////////////////////////////////////////



        // function figuring out where the canvas is clicked
        function getCursorPosition(canvas, event) {
            const rect = canvas.getBoundingClientRect()
            const relativeX = event.clientX - rect.left;
            const relativeY = event.clientY - rect.top;
            //console.log("Relative Info - X: " + relativeX + " Y: " + relativeY);
            getSquareInfo(relativeX, relativeY);
        }// end of getCoursorPosition()


        // getting the position of the mouse
        canvas = document.querySelector('canvas');
        canvas.addEventListener('mousedown', function (e) {
            getCursorPosition(canvas, e);
        })

        // getting all the information needed about this square
        function getSquareInfo(relativeX, relativeY) {

            //getting basic info of the square clicked
            var x = Math.trunc(relativeX / 20);
            var y = Math.trunc(relativeY / 20);
            var sqrX = (x * 20) + 1;
            var sqrY = (y * 20) + 1;

            console.log("Info To Pass - X:" + x + " Y:" + y);
            console.log("Square X: " + sqrX + " Y:" + sqrY);
            addToArray(x, y, sqrX, sqrY);
        }

        // now add the item to the array
        function addToArray(x, y, sqrX, sqrY, c = color) {

            // determine where the actual place in the array this will be stored
            var arraySpot;
            arraySpot = ((x + 1) * 17) + (y + 1);

            // now place info inside array (undefined = empty, 1 = live, 0 = end space)
            //if (!gridArray[arraySpot]) {

            gridArray[arraySpot] = {};
            gridArray[arraySpot].value = 1;
            gridArray[arraySpot].color = c;
            gridArray[arraySpot].coords = { x, y, sqrX, sqrY };
            ctx.clearRect(sqrX, sqrY, 18, 18);
            ctx.fillStyle = (c);
            ctx.fillRect(sqrX, sqrY, 18, 18);

            // Print out the players color
            //console.log("Players color is: " + playerGameBoard[0].playersColor);

            //// Print out the players game board
            //console.log("Player (" + playerGameBoard[0].playersColor + ")'s game board is: " + playerGameBoard[0].gameBoard);

            //console.log("Spot not taken, placing in array space: " + arraySpot);

            //} else if (gridArray[arraySpot].value == 1) {
            //    console.log("Spot : " + arraySpot + " in array is taken, please try again");
            //}

        }// end addToArray()

        function reRender() {
            for (var i = 0; i < gridArray.length; i++) {

                if (gridArray[i] && gridArray[i].coords) {
                    addToArray(gridArray[i].coords.x, gridArray[i].coords.y, gridArray[i].coords.sqrX, gridArray[i].coords.sqrY, gridArray[i].color);
                }

            }
        }


        // this function will run the entire game
        function gameMath() {

            // loop through the array first
            for (var i = 18; i <= 271; i++) {

                // easier way to track x and y location of cells being searched
                var x = Math.trunc(i / 17) - 1;
                var y = (i % 17) - 1;
                var sqrX = (x * 20) + 1;
                var sqrY = (y * 20) + 1;
                var count = 0;

                // will need to check -18 , -17, -16, -1, +1, +16, 17, +18 and if the total = 3 the cell = 1
                if (gridArray[i - 18] && (gridArray[i - 18].value == 1 || gridArray[i - 18].value == 3)) {
                    count++;
                }
                if (gridArray[i - 17] && (gridArray[i - 17].value == 1 || gridArray[i - 17].value == 3)) {
                    count++;
                }
                if (gridArray[i - 16] && (gridArray[i - 16].value == 1 || gridArray[i - 16].value == 3)) {
                    count++;
                }
                if (gridArray[i - 1] && (gridArray[i - 1].value == 1 || gridArray[i - 1].value == 3)) {
                    count++;
                }
                if (gridArray[i + 1] && (gridArray[i + 1].value == 1 || gridArray[i + 1].value == 3)) {
                    count++;
                }
                if (gridArray[i + 16] && (gridArray[i + 16].value == 1 || gridArray[i + 16].value == 3)) {
                    count++;
                }
                if (gridArray[i + 17] && (gridArray[i + 17].value == 1 || gridArray[i + 17].value == 3)) {
                    count++;
                }
                if (gridArray[i + 18] && (gridArray[i + 18].value == 1 || gridArray[i + 18].value == 3)) {
                    count++;
                }
                //console.log('Space: ' + i + ' has ' + count + ' neighbors');

                // Any live cell with 1 or 0 or greater than 4 neighbors dies (2 or 3 3 neighbors live)
                if (gridArray[i]) {

                    if (count >= 4 || count == 0 || count == 1) {
                        console.log("DEAD COLOR!!!");
                        gridArray[i] = {};
                        gridArray[i].value = 3; //3 is just a temporary value for going to die
                        deadColor = 'rgb(255, 255, 255)';
                        gridArray[i].color = deadColor;
                        gridArray[i].coords = { x, y, sqrX, sqrY };
                        ctx.fillStyle = (deadColor);
                        ctx.fillRect(sqrX, sqrY, 18, 18);
                    }
                }
                // see if any dead with 3 neighbors will come to life
                else if (!gridArray[i]) {
                    // TO DO: Figure out the random color information
                    if (count == 3) {
                        gridArray[i] = {};
                        gridArray[i].value = 4; // 4 will just be a temporary value for going to come to life
                        AliveColor = 'rgba(0,0,0,0.5)';
                        gridArray[i].color = AliveColor;
                        gridArray[i].coords = { x, y, sqrX, sqrY };
                        ctx.fillStyle = (AliveColor);
                        ctx.fillRect(sqrX, sqrY, 20, 20);
                    }
                }
            }

            // now change everything to their normal numbers 3-> undefined and 4->1
            for (var i = 18; i <= 271; i++) {
                if (gridArray[i] && gridArray[i].value == 3) {
                    gridArray[i] = null;
                } else if (gridArray[i] && gridArray[i].value == 4) {
                    gridArray[i].value = 1;
                }
            }

            connection.invoke("SendMessage", color, gridArray).catch(function (err) {
                return console.error(err);
            });
        }// end gameMath()
    </script>
</div>
<script src="~/js/chat.js"></script>    